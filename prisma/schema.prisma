// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id        String @id @default(uuid()) @db.Uuid
  email     String @unique
  firstName String
  lastName  String
  username  String
  password  String

  records Record[]
  tasks   JoinUserTask[]
  events  JoinUserEvent[]
  shifts  JoinUserShift[]
}

model Event {
  id    String   @id @default(uuid()) @db.Uuid
  name  String   @unique
  start DateTime
  end   DateTime
  path  String   @unique

  shifts Shift[]
  users  JoinUserEvent[]
}

model Record {
  id        String   @id @default(uuid()) @db.Uuid
  amount    Float
  createdAt DateTime @default(now())

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String? @db.Uuid
}

model Task {
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @unique
  description String?
  start       DateTime?
  end         DateTime?

  assignees JoinUserTask[]

  childTasks   Task[]  @relation("ParentChildTask")
  parentTaskId String? @db.Uuid
  parentTask   Task?   @relation("ParentChildTask", fields: [parentTaskId], references: [id])
}

model Shift {
  id    String    @id @default(uuid()) @db.Uuid
  start DateTime?
  end   DateTime?

  volunteers JoinUserShift[]

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @db.Uuid
}

// Joins
model JoinUserTask {
  id String @id @default(uuid()) @db.Uuid

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.Uuid

  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String? @db.Uuid
}

model JoinUserEvent {
  id String @id @default(uuid()) @db.Uuid

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.Uuid

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String? @db.Uuid
}

model JoinUserShift {
  id String @id @default(uuid()) @db.Uuid

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.Uuid

  shift   Shift?  @relation(fields: [shiftId], references: [id])
  shiftId String? @db.Uuid
}
