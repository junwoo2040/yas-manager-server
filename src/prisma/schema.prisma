// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  username  String @unique
  email     String @unique
  password  String
  role      Role

  // Relations
  tasks       TaskToUser[]
  events      EventToUser[]
  shiftBlocks ShiftBlockToUser[]
  records     Record[]
}

model Event {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  start       DateTime
  end         DateTime
  location    String
  description String?

  // Relations
  users   EventToUser[]
  shifts  Shift[]
  tasks   Task[]
  records Record[]
}

model Shift {
  id    String   @id @default(uuid()) @db.Uuid
  start DateTime
  end   DateTime

  // Relations
  event       Event        @relation(fields: [eventId], references: [id])
  eventId     String       @db.Uuid
  shiftBlocks ShiftBlock[]
}

model ShiftBlock {
  id    String   @id @default(uuid()) @db.Uuid
  start DateTime
  end   DateTime

  // Relations
  shift   Shift              @relation(fields: [shiftId], references: [id])
  shiftId String             @db.Uuid
  users   ShiftBlockToUser[]
}

model Task {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String?
  status      TaskStatus

  // Relations
  event     Event?       @relation(fields: [eventId], references: [id])
  eventId   String?      @db.Uuid
  assignees TaskToUser[]
}

model Record {
  // Default
  id    String     @id @default(uuid()) @db.Uuid
  type  RecordType
  check Float
  date  DateTime
  note  String?

  // Relations
  event    Event?  @relation(fields: [eventId], references: [id])
  eventId  String? @db.Uuid
  author   User    @relation(fields: [authorId], references: [id])
  authorId String  @db.Uuid

  // Donation
  donor String?

  // Sale
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.Uuid
  quantity  Int?
  buyer     String?

  // Payment
  description String?
}

model Product {
  id       String @id @default(uuid()) @db.Uuid
  name     String @unique
  price    Float
  stock    Int
  currency String

  // Relations
  records Record[]
}

// Resolvers
model TaskToUser {
  id     String @id @default(uuid()) @db.Uuid
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

model EventToUser {
  id      String @id @default(uuid()) @db.Uuid
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @db.Uuid
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.Uuid
}

model ShiftBlockToUser {
  id           String     @id @default(uuid()) @db.Uuid
  shiftBlock   ShiftBlock @relation(fields: [shiftBlockId], references: [id])
  shiftBlockId String     @db.Uuid
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.Uuid
}

// Enums
enum Role {
  ADMIN
  LEADER
  MEMBER
}

enum TaskStatus {
  TODO
  ASSIGNED
  INPROGRESS
  DONE
}

enum RecordType {
  MERCH
  TICKET
  DONATION
}
